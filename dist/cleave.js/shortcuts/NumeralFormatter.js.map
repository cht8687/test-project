{"version":3,"sources":["../../../src/cleave.js/shortcuts/NumeralFormatter.js"],"names":[],"mappings":"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","file":"NumeralFormatter.js","sourcesContent":["'use strict';\n\nvar NumeralFormatter = function (numeralDecimalMark,\n                                 numeralDecimalScale,\n                                 numeralThousandsGroupStyle,\n                                 delimiter) {\n    var owner = this;\n\n    owner.numeralDecimalMark = numeralDecimalMark || '.';\n    owner.numeralDecimalScale = numeralDecimalScale >= 0 ? numeralDecimalScale : 2;\n    owner.numeralThousandsGroupStyle = numeralThousandsGroupStyle || NumeralFormatter.groupStyle.thousand;\n    owner.delimiter = (delimiter || delimiter === '') ? delimiter : ',';\n    owner.delimiterRE = delimiter ? new RegExp('\\\\' + delimiter, 'g') : '';\n};\n\nNumeralFormatter.groupStyle = {\n    thousand: 'thousand',\n    lakh:     'lakh',\n    wan:      'wan'\n};\n\nNumeralFormatter.prototype = {\n    getRawValue: function (value) {\n        return value.replace(this.delimiterRE, '').replace(this.numeralDecimalMark, '.');\n    },\n\n    format: function (value) {\n        var owner = this, parts, partInteger, partDecimal = '';\n\n        // strip alphabet letters\n        value = value.replace(/[A-Za-z]/g, '')\n            // replace the first decimal mark with reserved placeholder\n            .replace(owner.numeralDecimalMark, 'M')\n\n            // replace the first minus sign reserved placeholder\n            .replace(/^\\-/, 'N')\n\n            // strip the non numeric letters except the minus sign and decimal placeholder\n            .replace(/[^\\dMN]/g, '')\n\n            // replace the minus sign (if present)\n            .replace('N', '-')\n\n            // replace decimal mark\n            .replace('M', owner.numeralDecimalMark)\n\n            // strip any leading zeros\n            .replace(/^(-)?0+(?=\\d)/, '$1');\n\n        partInteger = value;\n\n        if (value.indexOf(owner.numeralDecimalMark) >= 0) {\n            parts = value.split(owner.numeralDecimalMark);\n            partInteger = parts[0];\n            partDecimal = owner.numeralDecimalMark + parts[1].slice(0, owner.numeralDecimalScale);\n        }\n\n        switch (owner.numeralThousandsGroupStyle) {\n        case NumeralFormatter.groupStyle.lakh:\n            partInteger = partInteger.replace(/(\\d)(?=(\\d\\d)+\\d$)/g, '$1' + owner.delimiter);\n\n            break;\n\n        case NumeralFormatter.groupStyle.wan:\n            partInteger = partInteger.replace(/(\\d)(?=(\\d{4})+$)/g, '$1' + owner.delimiter);\n\n            break;\n\n        default:\n            partInteger = partInteger.replace(/(\\d)(?=(\\d{3})+$)/g, '$1' + owner.delimiter);\n        }\n\n        return partInteger.toString() + (owner.numeralDecimalScale > 0 ? partDecimal.toString() : '');\n    }\n};\n\nif (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = exports = NumeralFormatter;\n}\n"]}