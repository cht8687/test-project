{"version":3,"sources":["../../../src/cleave.js/shortcuts/PhoneFormatter.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAI,cAAc,GAAG,SAAjB,cAAc,CAAa,SAAS,EAAE,SAAS,EAAE;AACjD,QAAI,KAAK,GAAG,IAAI,CAAC;;AAEjB,SAAK,CAAC,SAAS,GAAG,AAAC,SAAS,IAAI,SAAS,KAAK,EAAE,GAAI,SAAS,GAAG,GAAG,CAAC;AACpE,SAAK,CAAC,WAAW,GAAG,SAAS,GAAG,IAAI,MAAM,CAAC,IAAI,GAAG,SAAS,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;;AAEvE,SAAK,CAAC,SAAS,GAAG,SAAS,CAAC;CAC/B,CAAC;;AAEF,cAAc,CAAC,SAAS,GAAG;AACvB,gBAAY,EAAE,sBAAU,SAAS,EAAE;AAC/B,YAAI,CAAC,SAAS,GAAG,SAAS,CAAC;KAC9B;;AAED,UAAM,EAAE,gBAAU,WAAW,EAAE;AAC3B,YAAI,KAAK,GAAG,IAAI,CAAC;;AAEjB,aAAK,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;;;AAGxB,mBAAW,GAAG,WAAW,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;;;AAGjD,mBAAW,GAAG,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;;AAEzD,YAAI,MAAM,GAAG,EAAE;YAAE,OAAO;YAAE,SAAS,GAAG,KAAK,CAAC;;AAE5C,aAAK,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;AACtD,mBAAO,GAAG,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;;;AAG5D,gBAAI,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;AAC1B,sBAAM,GAAG,OAAO,CAAC;;AAEjB,yBAAS,GAAG,IAAI,CAAC;aACpB,MAAM;AACH,oBAAI,CAAC,SAAS,EAAE;AACZ,0BAAM,GAAG,OAAO,CAAC;iBACpB;;;aAGJ;SACJ;;;;AAID,cAAM,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;;AAErC,cAAM,GAAG,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;;AAEnD,eAAO,MAAM,CAAC;KACjB;CACJ,CAAC;;AAEF,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ,EAAE;AAClE,UAAM,CAAC,OAAO,GAAG,OAAO,GAAG,cAAc,CAAC;CAC7C","file":"PhoneFormatter.js","sourcesContent":["'use strict';\n\nvar PhoneFormatter = function (formatter, delimiter) {\n    var owner = this;\n\n    owner.delimiter = (delimiter || delimiter === '') ? delimiter : ' ';\n    owner.delimiterRE = delimiter ? new RegExp('\\\\' + delimiter, 'g') : '';\n\n    owner.formatter = formatter;\n};\n\nPhoneFormatter.prototype = {\n    setFormatter: function (formatter) {\n        this.formatter = formatter;\n    },\n\n    format: function (phoneNumber) {\n        var owner = this;\n\n        owner.formatter.clear();\n\n        // only keep number and +\n        phoneNumber = phoneNumber.replace(/[^\\d+]/g, '');\n\n        // strip delimiter\n        phoneNumber = phoneNumber.replace(owner.delimiterRE, '');\n\n        var result = '', current, validated = false;\n\n        for (var i = 0, iMax = phoneNumber.length; i < iMax; i++) {\n            current = owner.formatter.inputDigit(phoneNumber.charAt(i));\n\n            // has ()- or space inside\n            if (/[\\s()-]/g.test(current)) {\n                result = current;\n\n                validated = true;\n            } else {\n                if (!validated) {\n                    result = current;\n                }\n                // else: over length input\n                // it turns to invalid number again\n            }\n        }\n\n        // strip ()\n        // e.g. US: 7161234567 returns (716) 123-4567\n        result = result.replace(/[()]/g, '');\n        // replace library delimiter with user customized delimiter\n        result = result.replace(/[\\s-]/g, owner.delimiter);\n\n        return result;\n    }\n};\n\nif (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = exports = PhoneFormatter;\n}\n"]}